import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from scipy.stats import gaussian_kde as kde
from matplotlib.colors import Normalize
from matplotlib import cm
from matplotlib.patches import Polygon
from matplotlib import path

from altFACS.density import *
        
def getContours(df: pd.DataFrame, x='FSC-A', y='SSC-A', **kwargs)->plt.Polygon:
    '''
    A function to generate and return a contour polygon for gating.
    
    Parameters:
    df: pd.DataFrame
    FACS data
    
    x: str
    Name of x-axis column.
    
    y: str
    Name of x-axis column.
    
    
    Optional Parameters:
    contour: int
    Choose a contour line to use as your polygon gate.
    
    population:
    For density plot with more than one peak, population allows you to select which peak is chosen.
    
    nbins: int
    How many bins would you like to use for the density calculation?
    
    
    Returns:
    poly: matplotlib.patches.Polygon
    
    
    '''
    
    x = df[x]
    y = df[y]
    
    #Get **kwargs
    contour    = kwargs.get('contour', 2)
    population = kwargs.get('population', 0) #which population for plots with more than one
    nbins      = kwargs.get('nbins', 300)
    
    # Evaluate a gaussian kde on a regular grid of nbins x nbins over df extents
    k = kde([x,y])
    xi, yi = np.mgrid[x.min():x.max():nbins*1j, y.min():y.max():nbins*1j]
    zi = k(np.vstack([xi.flatten(), yi.flatten()]))
    
    CS = plt.contour(xi, yi, zi.reshape(xi.shape));
    
    #Extract desired contour
    coords = CS.allsegs[contour][0]
    
    #Convert to a list
    coord_list=list()
    for point in coords:
        coord_list.append([point[0], point[1]])
    coord_list

    #Convert to an array
    coord_array = np.array(coord_list)

    #Pull out coordinates
    xp = coord_array.T[0]
    yp = coord_array.T[1]

    #Define polygon
    poly = Polygon(np.column_stack([xp, yp]), fill=False)
    
    return poly


def contourPlot(df: pd.dfFrame, x: str, y: str, poly: plt.Polygon, **kwargs):
    '''
    A function to overlay the polygon gate on a densityScatterPlot.
    
    Parameters:
    df: pd.DataFrame
    FACS data.
    
    x: str
    Name of x-axis column.
    
    y: str
    Name of x-axis column.
    
    poly: matplotlib.patches.Polygon
    
    
    Optional Parameters:
    title: str
    File name is 'save' is True.
    
    ringcolor: str
    Set the edge color for the polygon gate.
    
    polyfill: bool (Default False)
    Would you like to fill the polygon? I can't see why you would. There is no transparency option yet.
    
    save: bool (Default False)
    Would you like to save the plot?
    
    savepath: str
    Where would you like to save the plot. By Default it will be saved in the current folder.
    
    '''
    
    #Get **kwargs
    title     = kwargs.get('title', 'contourPlot_figure')
    ringcolor = kwargs.get('contour_ring_color', 'magenta')
    polyfill  = kwargs.get('polygon_fill', False)
    save      = kwargs.get('save', False)
    savepath  = kwargs.get('savepath', './')
    
    #Set plot kwarg to True
    kwargs['plot'] = True
    #Set save kwarg to False
    kwargs['save'] = False

    densityScatterPlot(df, 'FSC-A', 'SSC-A', **kwargs);
   
    #Define polygon
    poly = Polygon(poly.xy, edgecolor = ringcolor, fill=polyfill)
    
    plt.gca().add_patch(poly);
    
    if save:
        plt.savefig(savepath+title)
        
    
def scatterGate(df: pd.DataFrame, poly: plt.Polygon, **kwargs)->pd.DataFrame:
    '''
    Add boolean Scatter Gates indicating events within the input polygon.
    
    Parameters:
    df: pd.DataFrame
    FACS data. Must contain 'FSC-A' and 'SSC-A' columns.
    
    poly: matplotlib.patches.Polygon
    A polygon gate, can be generated by getContours().
    
    
    Optional Parameters:
    verbose: bool (Default True)
    Print the number of scatter gated events.
    
    Return:
    df: pd.DataFrame.
    FACS data with a 'Scatter+' column (bool). True indicates events inside the polygon gate.
    
    '''
    
    assert 'FSC-A' in df.columns
    assert 'SSC-A' in df.columns
    
    #Get **kwargs
    verbose     = kwargs.get('verbose', True)
    
    ##get df coordinates
    coords = np.array(df[['FSC-A', 'SSC-A']])

    ##get polygon coordinates
    p = path.Path(poly.get_xy())

    #Detect gated events
    df.loc[:, "Scatter+"] = p.contains_points(coords)
    scatter = df[df['Scatter+']].copy()
    
    ##Count scatter_gated_events
    scatter_gated_events = len(scatter)
    
    if verbose:
        print('Scatter gated events =',scatter_gated_events) 
    
    return df

# Run the main() function
if __name__ == '__main__':
    main()